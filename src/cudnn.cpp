#include "cudnn.hpp"

#include <map>
#include <string>

cudnn_status_checker check;

const std::map<cudnnStatus_t, std::string> cudnn_status_names = {
    {CUDNN_STATUS_SUCCESS, "CUDNN_STATUS_SUCCESS"},
    {CUDNN_STATUS_NOT_INITIALIZED, "CUDNN_STATUS_NOT_INITIALIZED"},
    {CUDNN_STATUS_ALLOC_FAILED, "CUDNN_STATUS_ALLOC_FAILED"},
    {CUDNN_STATUS_BAD_PARAM, "CUDNN_STATUS_BAD_PARAM"},
    {CUDNN_STATUS_INTERNAL_ERROR, "CUDNN_STATUS_INTERNAL_ERROR"},
    {CUDNN_STATUS_INVALID_VALUE, "CUDNN_STATUS_INVALID_VALUE"},
    {CUDNN_STATUS_ARCH_MISMATCH, "CUDNN_STATUS_ARCH_MISMATCH"},
    {CUDNN_STATUS_MAPPING_ERROR, "CUDNN_STATUS_MAPPING_ERROR"},
    {CUDNN_STATUS_EXECUTION_FAILED, "CUDNN_STATUS_EXECUTION_FAILED"},
    {CUDNN_STATUS_NOT_SUPPORTED, "CUDNN_STATUS_NOT_SUPPORTED"},
    {CUDNN_STATUS_LICENSE_ERROR, "CUDNN_STATUS_LICENSE_ERROR"},
    {CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING,
     "CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING"},
    {CUDNN_STATUS_RUNTIME_IN_PROGRESS, "CUDNN_STATUS_RUNTIME_IN_PROGRESS"},
    {CUDNN_STATUS_RUNTIME_FP_OVERFLOW, "CUDNN_STATUS_RUNTIME_FP_OVERFLOW"},
};

std::string get_cudnn_status_name(cudnnStatus_t status)
{
    const auto it = cudnn_status_names.find(status);
    if (it == cudnn_status_names.end()) { return "UNKNUWN_CUDNN_ERROR"; }
    return it->second;
}
